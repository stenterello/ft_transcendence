version: '3'
services:

  frontend:
    container_name: frontend
    image: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV}
    command: npm run start:dev
    depends_on:
      - postgres
      - backend
    ports:
      - "5173:5173"
    networks:
      - frontend
      - nestjs-network
    volumes:
      - ./frontend:/usr/src/frontend
    restart: always

  backend:
    container_name: backend
    image: backend
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./backend
      target: ${NODE_ENV}
      dockerfile: Dockerfile
    command: ["/bin/sh", "./wait-for-postgres.sh", "./docker-entry-point.sh", "npm run start:dev"]
    env_file:
      - .env
    ports:
      - '3000:3000'
    depends_on:
      - postgres
    networks:
      - nestjs-network
    volumes:
      - ./backend:/usr/src/backend
      - /usr/src/backend/node_modules
    restart: always

  postgres:
    image: postgres:alpine
    container_name: postgres
    ports:
      - '5432:5432'
    networks:
      - nestjs-network
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: "${POSTGRES_DB_PREFIX}_${POSTGRES_DB_NAME}"
      PG_DATA: /var/lib/postgresql/data
    restart: always

networks:
  frontend:
  nestjs-network:

volumes:
  db:
  
