import { Prisma } from "@prisma/client";
import { PrismaService } from "prisma/prisma.service";
import { CreateUserDto, Auth42Dto, UpdateAvatarDto, UpdatePwdDto, UpdateUsernameDto, UpdateEmailDto } from "./user.dto";
export declare class UserService {
    private prisma;
    constructor(prisma: PrismaService);
    auth42(auth42Dto: Auth42Dto): Promise<void>;
    create(createUserDto: CreateUserDto): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}>;
    findAll(): Prisma.PrismaPromise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {})[]>;
    findById(id: number): Prisma.Prisma__UserClient<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}) | null, null, import("@prisma/client/runtime").DefaultArgs>;
    delAll(): Promise<Prisma.BatchPayload>;
    findByCookie(userCookie: string): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}) | null>;
    findBySocket(userSocket: string): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}) | null>;
    findByName(name: string): Promise<any>;
    findByUser(name: string, password: string): Promise<boolean>;
    updateUsername(nameDto: UpdateUsernameDto): Promise<void>;
    updatePwd(pwd: UpdatePwdDto): Promise<boolean | (import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {})>;
    updateEmail(email: UpdateEmailDto): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}>;
    updateAvatar(path: UpdateAvatarDto): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}>;
    remove(id: number): Prisma.Prisma__UserClient<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}, never, import("@prisma/client/runtime").DefaultArgs>;
    findCookie(findCookie: string): Promise<boolean>;
    setTwoFactorAuthenticationSecret(secret: string, id: number): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}>;
    toggleTwoFactorAuthentication(name: string): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}) | undefined>;
    getAllFriends(cookie: string): Promise<string[] | null>;
    addFriend(cookie: string, friend: string): Promise<void | (import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {})>;
    block(user: string, to: string): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}>;
    unblock(user: string, to: string): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        username: string;
        email: string;
        status: string;
        score: number;
        pictureLink: string | null;
        victories: number;
        loses: number;
        matches: number;
        password: string | null;
        cookie: string | null;
        expires: Date | null;
        twofaSecret: string | null;
        istwofaEnable: boolean | null;
        isOAuthLogged: boolean | null;
        socketId: string | null;
        friends: string[];
        friendsReq: string[];
        blocklist: string[];
        privateConv: string[];
        achievement: Prisma.JsonValue;
    }, unknown, never> & {}) | undefined>;
    getEvents(user: string): Promise<{
        events: (import("@prisma/client/runtime").GetResult<{
            id: number;
            createdAt: Date;
            type: import(".prisma/client").Type | null;
            sender: string;
            receiverId: number;
        }, unknown, never> & {})[];
    } | null>;
}
